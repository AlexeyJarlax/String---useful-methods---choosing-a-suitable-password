форматирование
Для форматирования строк используется статический метод String.format(String format, Object... args). 
В него передаётся два аргумента. Первый — образец для форматирования String format, это строка, 
в которой, как правило, используются символы преобразования (англ. «conversion character»), хотя их может и не быть. 
Далее идёт varargs Object... args — подразумевается, что он должен содержать столько аргументов, сколько в String format символов преобразования.


public class Practicum {
    public static void main(String[] args) {
        String[] colors = new String[]{"красный", "жёлтый", "зелёный"};
        System.out.printf("Цвета светофора: %s, %s и %s.", colors[0], colors[1], colors[2]);
    }
}


Результат
Цвета светофора: красный, жёлтый и зелёный.


Методы System.out.printf и String.format не занимаются преобразованиями непосредственно. 
Они всего лишь передают форматируемую строку и аргументы в специальный класс Formatter. 
Именно он производит подстановку и преобразование аргументов. Использовать этот класс напрямую, 
как правило, не требуется, но иногда это бывает полезно. Например, в Formatter можно передать объект класса StringBuilder. 
Более подробно изучить этот вопрос можно с помощью документации.
https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax 

====

Дополнительные параметры символов преобразования
К символам преобразования можно добавить параметры. С их помощью можно регулировать:
Расположение строки по левому или правому краю.
Максимальное и минимальное количество символов для выводимой строки.
Количество символов после плавающей точки в дробных числах.
Задать нужное расположение можно с помощью унификации длины строки. 
Для этого нужно добавить положительное число между знаком % и обозначением s. 
Это число обозначает минимальное число символов. 
В результате строка станет нужной длины — недостающие символы заполнятся пробелами.


public class Practicum {
    public static void main(String[] args) {
        String pizza = "Пицца, 1 шт., 310.50";
        String tee = "Чай, 1 шт., 113.30";
        int[] numbers = {1,2,3,4,5,6,7,8,9,10};
        System.out.print(numbers[0]);
        System.out.printf("%25s", pizza);
        System.out.println();
        System.out.print(numbers[1]);
        System.out.printf("%25s", tee);
    }
}


Результат
1     Пицца, 1 шт., 310.50
2       Чай, 1 шт., 113.30

====

Округление символов после точки 


public class Practicum {
    public static void main(String[] args) {
        double price = 12345.6789;
        System.out.printf("%2.3f", price); // Выведет 12345.68
	}
}


Результат
12345.679

====

Переносы и пустоты
Осталось только научиться добавлять переносы в форматируемую строку. 
Для этого существует два способа. Или добавить форматный символ %n , 
или специальный символ \n — вы уже встречали его в уроках и тренажёрах. 
В обоих случаях будет выполнен перенос строки. Отличие в том, 
что %n используется только в форматируемых строках, 
в то время как \n работает и в обычных строках. 
По этой причине чаще используется именно \n.


public class Practicum {
    public static void main(String[] args) {
        String pizza = "Пицца, 1 шт., 310.50";
        String tee = "Чай, 1 шт., 113.30";
        String cookies = "Печенье, 1 уп., 75.75";

        System.out.printf("%s%n%s%n%s", pizza, tee, cookies);
    }
}


Результат
Пицца, 1 шт., 310.50
Чай, 1 шт., 113.30
Печенье, 1 уп., 75.75

====

Задачка практикума. Ограничений на количество символов в строках наименования товара, количества и цены больше нет. 
При этом самая длинная строка с наименованием товара и его количеством должна разделяться ровно двумя пробелами. 
То же самое между количеством и ценой.
Для входных данных:
{"Пицца, 1 шт., 310.50", "Чай, 2 шт., 113.30", "Печенье, 1 уп., 75.75"}
Такой вывод программы корректен:
Пицца,         1003 шт.,  311431.50
Чай,           12 шт.,    1359.60
Печенье,       1 уп.,     75.75
Нить красная,  1 клубок,  12.23 
Вам в помощь реализована функция int findMaxLenght(String[] elements). Она пройдёт по массиву строк и вернёт размер максимального элемента этого массива.


public class CheckPrinterImproved {
    private int findMaxLength(String[] elements) {
        int max = 0;
        for (String e : elements) {
            if (e.length() > max) {
                max = e.length();
            }
        }
        return max;
    }

    public void printCheck(String[] items) {
        String[] names = new String[items.length];
        String[] quantity = new String[items.length];
        String[] price = new String[items.length];
        for (int i = 0; i < items.length; i++) {
            String[] strings = items[i].split(", ");
            names[i] = strings[0];
            quantity[i] = strings[1];
            price[i] = strings[2];
        }
        int first = findMaxLength(names) + 2;
        int second = findMaxLength(quantity) + 2;
        for (int i = 0; i < names.length; i++) {

            System.out.printf("%-10s,  %-7s,  %-8s", names[i], quantity[i], price[i]);
        }

    }
}


Вывод
Пицца, 1 шт., 310.50, Чай, 2 шт., 113.30, Печенье, 1 уп., 75.75

Пицца     ,  1 шт.  ,  310.50  
Чай       ,  2 шт.  ,  113.30  
Печенье   ,  1 уп.  ,  75.75   
